<?php

namespace Tests\Feature;

use App\Models\Badge;
use App\Models\User;
use Database\Seeders\DatabaseSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Event;
use Tests\TestCase;

class AchievementsControllerTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed(DatabaseSeeder::class);
    }

    /**
     * A basic feature test example.
     */
    public function test_returns_user_achievement_data_with_no_achievements(): void
    {
        //This test is when the user has no achievements
        $user = User::find(1);
        $response = $this->get("/users/{$user->id}/achievements");

        $response->assertStatus(200)
            ->assertJson([
                'unlocked_achievements' => [],
                'next_available_achievements' => [
                    "First Lesson Watched",
                    "5 Lessons Watched",
                    "10 Lessons Watched",
                    "25 Lessons Watched",
                    "50 Lessons Watched",
                    "First Comment Written",
                    "3 Comments Written",
                    "5 Comments Written",
                    "25 Comments Written",
                    "50 Comments Written"
                ],
                'current_badge' => 'Beginner',
                'next_badge' => 'Intermediate',
                'remaining_achievements_to_unlock_next_badge' => 4,
            ]);
    }

    public function test_returns_user_achievement_data_with_some_achievements(): void
    {
        Event::fake([
            \App\Events\BadgeUnlockedEvent::class
        ]);
        //This test is when the user has no achievements
        $user = User::find(1);

        Event::dispatch(new \App\Events\AchievementUnlockedEvent(1, $user));
        Event::dispatch(new \App\Events\AchievementUnlockedEvent(3, $user));
        Event::dispatch(new \App\Events\AchievementUnlockedEvent(5, $user));
        Event::dispatch(new \App\Events\AchievementUnlockedEvent(6, $user));

        $expected_badge = Badge::query()->firstWhere('achievement_count', 4);
        // Assert BadgeUnlocked event was fired
        Event::assertDispatched(\App\Events\BadgeUnlockedEvent::class, function ($event) use ($user, $expected_badge) {
            $user->badges()->syncWithoutDetaching([
                $expected_badge->id => [
                    'created_at' => now()->addMinutes(5)
                ]
            ]);
            return $event->user->id === $user->id && $event->badge_id === $expected_badge->id;
        });


        $response = $this->get("/users/{$user->id}/achievements");

        $response->assertStatus(200)
            ->assertJson([
                'unlocked_achievements' => [
                    "First Lesson Watched",
                    "10 Lessons Watched",
                    "50 Lessons Watched",
                    "First Comment Written"
                ],
                'next_available_achievements' => [
                    "5 Lessons Watched",
                    "25 Lessons Watched",
                    "3 Comments Written",
                    "5 Comments Written",
                    "25 Comments Written",
                    "50 Comments Written"
                ],
                'current_badge' => 'Intermediate',
                'next_badge' => 'Advanced',
                'remaining_achievements_to_unlock_next_badge' => 4,
            ]);
    }
}
